const mediaQuery = window.matchMedia("(max-width: 768px)");
// Función para validar campos alfanuméricos
function validarAlfanumerico(inputElement) {
  inputElement.addEventListener("keypress", (event) => {
    const char = String.fromCharCode(event.which);
    const alfanumericoRegex = /^[a-zA-Z0-9 ]$/;
    if (!alfanumericoRegex.test(char)) {
      event.preventDefault();
    }
  });
}
// Función para validar que solo se ingresen números
function validarNumeros(inputElement) {
  inputElement.addEventListener("keypress", (event) => {
    const char = event.key;
    const numerosRegex = /^\d$/;
    if (!numerosRegex.test(char)) {
      event.preventDefault();
    }
  });
}

function mapDataSelect(options, input) {
  options.forEach((opcion) => {
    const optionElement = document.createElement("option");
    optionElement.value = opcion.value;
    optionElement.textContent = opcion.text;
    input.appendChild(optionElement);
  });
}

function validarEstructuraCorreo(inputElement) {
  const correoValido = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(inputElement.value);
  if (!correoValido) {
    inputElement.style.borderColor = "red";
    const errorMessage = inputElement.nextElementSibling;
    if (errorMessage) {
      errorMessage.textContent = "Estructura de correo inválida.";
      errorMessage.style.display = "block";
    }
    return false;
  } else {
    inputElement.style.borderColor = "#e0e0e0";
    const errorMessage = inputElement.nextElementSibling;
    if (errorMessage) {
      errorMessage.style.display = "none";
    }
    return true;
  }
}
// Función para validar correos electrónicos
function validarCorreo(inputElement) {
  inputElement.addEventListener("input", () => {
    const correoActual = inputElement.value;
    // Verifica si el correo actual contiene un '@'
    if (correoActual.includes("@")) {
      const [usuario, dominio] = correoActual.split("@"); // Divide el correo en usuario y dominio
      // Verifica el primer carácter del dominio
      if (dominio.startsWith("-")) {
        inputElement.value = `${usuario}@`; // Elimina el guion
        return;
      }
      // Verifica el último carácter del dominio
      if (dominio.endsWith("-")) {
        inputElement.value = `${usuario}@${dominio.slice(0, -1)}`; // Elimina el guion
        return;
      }
    }
  });
  inputElement.addEventListener("keypress", (event) => {
    const char = event.key;
    const correoActual = inputElement.value;
    const correoRegex = /^[a-zA-Z0-9@.-]$/;
    // Permitir caracteres solo si coinciden con la expresión regular
    if (!correoRegex.test(char)) {
      event.preventDefault();
      return;
    }
    if (char === "@") {
      if (correoActual.length === 0 || correoActual.includes("@")) {
        event.preventDefault();
        return;
      }
    }
    if (char === " ") {
      event.preventDefault();
      return;
    }
    // Verifica que el dominio no empiece ni termine con un guión
    if (correoActual.includes("@")) {
      const dominio = correoActual.split("@")[1];
      // En este punto, verifica si el dominio ya existe y no permite insertar un guion al final
      if (char === "-") {
        if (dominio.length === 0 || (dominio.length > 0 && dominio[dominio.length - 1] === "-")) {
          event.preventDefault();
          return;
        }
      }
    }
  });
}

function validarFechaNacimiento(fechaNacimientoInput) {
  if (fechaNacimientoInput.value === "") {
    return true;
  }
  const fechaNacimiento = new Date(fechaNacimientoInput.value);
  const hoy = new Date();
  let edad = hoy.getFullYear() - fechaNacimiento.getFullYear();
  const mes = hoy.getMonth() - fechaNacimiento.getMonth();
  // Ajustar la edad si no ha cumplido años este año
  if (mes < 0 || (mes === 0 && hoy.getDate() < fechaNacimiento.getDate())) {
    edad--;
  }
  return edad >= 2 && edad <= 65;
}

function validarTelefono(inputElement) {
  const telefonoValido = inputElement.value.trim().length >= 10;
  if (!telefonoValido) {
    inputElement.style.borderColor = "red";
    const errorMessage = inputElement.nextElementSibling;
    if (errorMessage) {
      errorMessage.textContent = "El campo debe tener al menos 10 dígitos.";
      errorMessage.style.display = "block";
    }
    return false;
  } else {
    inputElement.style.borderColor = "#e0e0e0";
    const errorMessage = inputElement.nextElementSibling;
    if (errorMessage) {
      errorMessage.style.display = "none";
    }
    return true;
  }
}
// Función para validar la fecha de activación
function validarFechaActivacion(fechaActivacionInput) {
  // Verificar si el campo está vacío
  if (fechaActivacionInput.value === "") {
    return false; // Campo vacío no es válido
  }
  // Convertir el valor del campo a un objeto Date
  const fechaActivacion = new Date(fechaActivacionInput.value);
  // Obtener la fecha y hora actual
  const fechaActual = new Date();
  // Calcular la diferencia en milisegundos entre ambas fechas
  const diferenciaMilisegundos = fechaActivacion - fechaActual;
  // Convertir la diferencia a horas
  const diferenciaHoras = diferenciaMilisegundos / (1000 * 60 * 60);
  // Verificar si la diferencia es mayor a 6 horas
  return diferenciaHoras >= 6;
}
// Obtener ciudades desde el endpoint
const getCities = async () => {
  const clientId = "105e2e9a";
  const clientSecret = "aa75c8b9c4a16f31ce1e2a278b341a98";
  const urlMunicipios =
    "https://core-positiva-apis-pre-apicast-staging.apps.openshift4.positiva.gov.co/municipio/v1/positiva/scp/parametrica/consultaMunicipio";
  const url_departamento =
    "https://core-positiva-apis-pre-apicast-staging.apps.openshift4.positiva.gov.co/departamento/v1/positiva/scp/parametrica/consultaDepartamento";
  const tokenEndpoint =
    "https://keycloak-sso-app.apps.openshift4.positiva.gov.co/auth/realms/apis-pre/protocol/openid-connect/token";
  const tokenRequestOptions = {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
    body: `grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}`,
  };
  const tokenResponse = await fetch(tokenEndpoint, tokenRequestOptions);
  const tokenData = await tokenResponse.json();
  const accessToken = tokenData.access_token;
  const options = {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${accessToken}`,
      Accept: "*/*",
    },
  };
  const responseDepartamentos = await fetch(url_departamento, options);
  const responseMunicipios = await fetch(urlMunicipios, options);
  if (!responseMunicipios.ok || !responseDepartamentos.ok) {
    throw new Error("Error al obtener los municipios");
  }
  const departamentos = await responseDepartamentos.json();
  const municipios = await responseMunicipios.json();
  return { departamentos, municipios };
};

document.addEventListener("DOMContentLoaded", async () => {
  const tipoDocumentoSelect = document.getElementById("tipoDocumento");
  const numeroDocumentoInput = document.getElementById("numeroDocumento");
  const direccionResidenciaInput = document.getElementById("direccionResidencia");
  const primerNombreInput = document.getElementById("primerNombre");
  const apellidoInput = document.getElementById("apellido");
  const generoSelect = document.getElementById("genero");
  const correoElectronicoInput = document.getElementById("correoElectronico");
  const confirmarCorreoInput = document.getElementById("confirmarCorreo");
  const celularInput = document.getElementById("telefono");
  const formGroup = document.querySelector(".form-anual__grupo");
  const ciudadInput = document.getElementById("ciudad");
  const resultadoCiudad = document.getElementById("resultado-ciudad");
  const fechaNacimientoInput = document.getElementById("fechaNacimiento");
  const fechaExpedicionInput = document.getElementById("fechaExpedicion");
  const containerCheckbox = document.querySelector(".etiqueta-checkbox");
  const autorizacionCheckbox = document.getElementById("autorizacionDatos");
  const formulario = document.getElementById("formularioDatosPersonales");
  const botonContinuar = document.querySelector(".boton-continuar");
  const containerTitleModal = document.querySelector(".container__titleModal");
  const modal = document.getElementById("modalValidations");
  const closeModal = document.querySelector(".close");
  const fechaActivacionInput = document.getElementById("fechaActivacion");
  const nameModalFinal = document.getElementById("nameText__ModalFinal");
  const modalInfo = document.getElementById("modalInformation");
  const closeModalInfo = modalInfo.querySelector(".modalInformation-close");
  const confirmModal = document.getElementById("confirmModal");
  const closeConfirmModal = confirmModal.querySelector(".confirmModal-close");
  let departamentosData = [];
  let municipiosData = [];
  const opcionesTipoDocumento = [
    { text: "Cédula de Ciudadanía", value: "Cédula de Ciudadanía" },
    { text: "NIT", value: "Número de Identificación Tributaria" },
  ];
  const opcionesTipoGenero = [
    { text: "Masculino", value: "Masculino" },
    { text: "Femenino", value: "Femenino" },
  ];
  mapDataSelect(opcionesTipoDocumento, tipoDocumentoSelect);
  mapDataSelect(opcionesTipoGenero, generoSelect);
  validarAlfanumerico(numeroDocumentoInput);
  validarAlfanumerico(direccionResidenciaInput);
  validarAlfanumerico(primerNombreInput);
  validarAlfanumerico(apellidoInput);
  validarCorreo(correoElectronicoInput);
  validarCorreo(confirmarCorreoInput);
  validarNumeros(numeroDocumentoInput);
  validarNumeros(celularInput);
  try {
    const citiesData = await getCities();
    departamentosData = citiesData.departamentos;
    municipiosData = citiesData.municipios;
  } catch (error) {
    console.error("Error al obtener los municipios:", error);
  }
  //! Función para filtrar y mostrar resultados
  ciudadInput.addEventListener("input", () => {
    const valor = ciudadInput.value.trim().toLowerCase();
    resultadoCiudad.innerHTML = "";
    if (valor) {
      // Filtrar municipios según la entrada del usuario
      const resultadosFiltrados = municipiosData.filter((municipio) => municipio.nombreMunicipio.toLowerCase().includes(valor));
      resultadosFiltrados.forEach((municipio) => {
        const departamento = departamentosData.find((dep) => dep.idDepartamento === municipio.idDepartamento);
        const divResultado = document.createElement("div");
        divResultado.textContent = `${municipio.nombreMunicipio} - ${departamento?.NombreDepartamento}`;
        divResultado.classList.add("resultado-item");
        divResultado.addEventListener("click", () => {
          ciudadInput.value = `${municipio.nombreMunicipio} - ${departamento?.NombreDepartamento}`; // Asignar el valor al input
          resultadoCiudad.innerHTML = "";
        });
        resultadoCiudad.appendChild(divResultado);
      });
    }
  });
  //? Limpiar resultados de la ciudad al hacer clic fuera
  document.addEventListener("click", (event) => {
    if (!ciudadInput.contains(event.target)) {
      resultadoCiudad.innerHTML = "";
    }
  });
  //! Función para validar todos los campos
  function validarFormulario() {
    let formularioValido = true;
    const inputs = formulario.querySelectorAll("input, select");
    inputs.forEach((input) => {
      input.style.borderColor = "#e0e0e0";
      const errorMessage = input.nextElementSibling;
      if (errorMessage) {
        errorMessage.style.display = "none";
      }
    });
    //* Validar cada campo
    inputs.forEach((input) => {
      //* Validar una Ciudad Válida
      if (input.id == "ciudad") {
        const valor = ciudadInput.value.trim().toLowerCase();
        // Verifica que el valor contenga un guion y lo divide
        const partes = valor.split(" - ");
        if (partes.length === 2) {
          const municipioInput = partes[0].trim(); // Primer parte es el municipio
          const departamentoInput = partes[1].trim(); // Segunda parte es el departamento
          // Verifica si el municipio es válido
          const municipioValido = municipiosData.some((municipio) => municipio.nombreMunicipio.toLowerCase() === municipioInput);
          // Verifica si el departamento es válido
          const departamentoValido = departamentosData.some(
            (departamento) => departamento.NombreDepartamento.toLowerCase() === departamentoInput
          );
          if (!municipioValido || !departamentoValido) {
            input.style.borderColor = "red";
            const errorMessage = input.nextElementSibling;
            if (errorMessage) {
              errorMessage.style.display = "block";
            }
            gapInputContanier(false);
            containerCheckbox.style.marginTop = "0.5rem";
            formularioValido = false;
          }
        } else {
          input.style.borderColor = "red";
          const errorMessage = input.nextElementSibling;
          if (errorMessage) {
            errorMessage.style.display = "block";
          }
          gapInputContanier(false);
          containerCheckbox.style.marginTop = "0.5rem";
          formularioValido = false;
        }
      }
      if (!input.value) {
        input.style.borderColor = "red";
        const errorMessage = input.nextElementSibling;
        if (errorMessage) {
          errorMessage.style.display = "block";
        }
        gapInputContanier(false);
        formularioValido = false;
      }
    });
    if (!validarEstructuraCorreo(correoElectronicoInput)) {
      formularioValido = false;
    }
    if (!validarEstructuraCorreo(confirmarCorreoInput)) {
      formularioValido = false;
    }
    if (!validarTelefono(celularInput)) {
      formularioValido = false;
    }
    //* Validar fecha de Activacion
    if (!validarFechaActivacion(fechaActivacionInput)) {
      fechaActivacionInput.style.borderColor = "red";
      const errorMessage = fechaActivacionInput.nextElementSibling;
      if (fechaActivacionInput.value != "") {
        if (errorMessage) {
          errorMessage.textContent = "No cumples con el rango de 6 horas de anticipación";
          errorMessage.style.display = "block";
        }
        formularioValido = false;
        const modalTitle = modal.querySelector("h2");
        const modalParagraph = modal.querySelector("p");
        modalTitle.textContent = "No cumples con el rango de horas de anticipación";
        modalParagraph.textContent = "No cumples con el rango de 6 horas de anticipación.";
        modal.classList.add("active");
      } else {
        if (errorMessage) {
          errorMessage.textContent = "Ingresa la información";
          errorMessage.style.display = "block";
        }
        formularioValido = false;
      }
      return;
    }
    //* Validar fecha de nacimiento
    if (!validarFechaNacimiento(fechaNacimientoInput)) {
      fechaNacimientoInput.style.borderColor = "red";
      const errorMessage = fechaNacimientoInput.nextElementSibling;
      if (errorMessage) {
        errorMessage.textContent = "No cumples con el rango de edad";
        errorMessage.style.display = "block";
      }
      formularioValido = false;
      const modalTitle = modal.querySelector("h2");
      const modalParagraph = modal.querySelector("p");
      modalTitle.textContent = "Edad no permitida";
      modalParagraph.textContent = "La edad debe estar entre 2 y 65 años para continuar.";
      modal.classList.add("active");
      return;
    }
    //* Validar que los correos coincidan
    if (correoElectronicoInput.value !== confirmarCorreoInput.value) {
      formularioValido = false;
      const modalTitle = modal.querySelector("h2");
      const modalParagraph = modal.querySelector("p");
      modalTitle.textContent = "Los correos no coinciden";
      modalParagraph.textContent = "Valida que hayas escrito el correo de forma correcta.";
      modal.classList.add("active");
      return;
    }
    //* Validar checkbox
    if (!autorizacionCheckbox.checked) {
      formularioValido = false;
      const modalTitle = modal.querySelector("h2");
      const modalParagraph = modal.querySelector("p");
      containerTitleModal.style.maxWidth = "23rem";
      containerTitleModal.style.marginLeft = "1rem";
      modalTitle.textContent = "Aceptar tratamiento de datos";
      modalParagraph.textContent =
        "Debes aceptar el tratamiento de datos personales para continuar con el proceso. Por favor, marca la casilla correspondiente.";
      modal.classList.add("active");
    }
    return formularioValido;
  }
  //* Función para eliminar el borde rojo y el mensaje de error al escribir
  function limpiarError(input) {
    input.addEventListener("input", () => {
      input.style.borderColor = "#e0e0e0";
      const errorMessage = input.nextElementSibling;
      if (errorMessage) {
        errorMessage.style.display = "none";
      }
    });
  }
  //! Agregar evento al botón "Continuar"
  botonContinuar.addEventListener("click", (event) => {
    event.preventDefault();
    if (validarFormulario()) {
      console.log("Formulario válido");
      gapInputContanier();
      containerCheckbox.style.marginTop = "0";
      const elemento = document.getElementById("form-anual");
      elemento.style.display = "none";
      const elementoResumen = document.getElementById("resumen-compra");
      elementoResumen.style.display = "block";
      const spanNombre = document.getElementById("nombre");
      const spanTipoDocumento = document.getElementById("tipoDocumentoResumen");
      const spanDocumento = document.getElementById("documento");
      const spanFechaExpedicion = document.getElementById("fechaExpedicionResumen");
      const spanDireccion = document.getElementById("direccion");
      const spanFechaNacimiento = document.getElementById("fechaNacimientoResumen");
      const spanCiudadResumen = document.getElementById("CiudadResumen");
      const spanEmail = document.getElementById("email");
      const spanCelular = document.getElementById("celular");
      // Asignar texto al span
      spanNombre.textContent = `${primerNombreInput.value} ${apellidoInput.value}`;
      nameModalFinal.textContent = spanNombre.textContent;
      spanTipoDocumento.textContent = tipoDocumentoSelect.value;
      spanDocumento.textContent = numeroDocumentoInput.value;
      spanFechaExpedicion.textContent = fechaExpedicionInput.value;
      spanDireccion.textContent = direccionResidenciaInput.value;
      spanFechaNacimiento.textContent = fechaNacimientoInput.value;
      spanCiudadResumen.textContent = ciudadInput.value;
      spanEmail.textContent = correoElectronicoInput.value;
      spanCelular.textContent = celularInput.value;
    } else {
      const toast = document.getElementById("toast");
      toast.classList.add("showToastError");
      setTimeout(() => {
        toast.classList.remove("showToastError");
      }, 3000);
    }
  });
  // Asignar la función de limpiar error a cada input
  const inputs = formulario.querySelectorAll("input, select");
  inputs.forEach((input) => {
    limpiarError(input);
  });
  // Close Modal Validation
  closeModal.addEventListener("click", () => {
    modal.classList.remove("active");
  });
  // Cerrar el modal si se hace clic fuera de él
  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      modal.classList.remove("active");
    }
  });
  // Abrir el modal
  openModal.addEventListener("click", (event) => {
    event.preventDefault();
    modalInfo.style.display = "flex";
  });
  // Cerrar el modal
  closeModalInfo.addEventListener("click", () => {
    modalInfo.style.display = "none";
  });
  // Cerrar al hacer clic fuera del modal
  window.addEventListener("click", (event) => {
    if (event.target === modalInfo) {
      modalInfo.style.display = "none";
    }
  });
  // Abrir el modal
  openConfirmModal.addEventListener("click", (event) => {
    event.preventDefault();
    confirmModal.style.display = "flex";
  });
  // Cerrar el modal con el botón
  closeConfirmModal.addEventListener("click", () => {
    confirmModal.style.display = "none";
  });
  // Cerrar al hacer clic fuera del contenido del modal
  window.addEventListener("click", (event) => {
    if (event.target === confirmModal) {
      confirmModal.style.display = "none";
    }
  });
  // Seleccionamos el botón
  const reloadButton = document.getElementById("reloadButton");
  const resumenCompra = document.getElementById("resumen-compra");
  const formAnual = document.getElementById("form-anual");
  // Agregamos un evento de clic
  reloadButton.addEventListener("click", () => {
    // location.reload(); // Recargar la página
    resumenCompra.style.display = "none"; // Oculta el elemento
    formAnual.style.display = "block";
  });
  function gapInputContanier(aux) {
    if (mediaQuery.matches) {
      formGroup.style.rowGap = "10px";
    } else {
      if (aux) {
        formGroup.style.rowGap = "20px";
      }
      else {
        formGroup.style.rowGap = "30px";
      }
    }
  }
});